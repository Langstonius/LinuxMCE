// If using the thread logger, these generated classes create lots of activity
#ifdef NO_SQL_THREAD_LOG
#undef THREAD_LOG
#endif

#ifdef WIN32
#include <winsock.h>
#endif

#include <iostream>
#include <string>
#include <vector>
#include <map>

#include <mysql.h>

using namespace std;
#include "PlutoUtils/StringUtils.h"
#include "Table_@table_name@.h"
@rows_getters_includes@
@fk_rows_getters_includes@

void Database_@database_name@::CreateTable_@table_name@()
{
	tbl@table_name@ = new Table_@table_name@(this);
}

void Database_@database_name@::DeleteTable_@table_name@()
{
	if( tbl@table_name@ )
		delete tbl@table_name@;
}

bool Database_@database_name@::Commit_@table_name@(bool bDeleteFailedModifiedRow,bool bDeleteFailedInsertRow)
{
	return tbl@table_name@->Commit(bDeleteFailedModifiedRow,bDeleteFailedInsertRow);
}

Table_@table_name@::~Table_@table_name@()
{
	map<@table_key@, class TableRow*, @table_key_comparer@>::iterator it;
	for(it=cachedRows.begin();it!=cachedRows.end();++it)
	{
		Row_@table_name@ *pRow = (Row_@table_name@ *) (*it).second;
		delete pRow;
	}

	for(it=deleted_cachedRows.begin();it!=deleted_cachedRows.end();++it)
	{
		Row_@table_name@ *pRow = (Row_@table_name@ *) (*it).second;
		delete pRow;
	}

	size_t i;
	for(i=0;i<addedRows.size();++i)
		delete addedRows[i];
	for(i=0;i<deleted_addedRows.size();++i)
		delete deleted_addedRows[i];
}


void Row_@table_name@::Delete()
{
	PLUTO_SAFETY_LOCK_ERRORSONLY(sl,table->database->m_MySqlMutex);
	Row_@table_name@ *pRow = this; // Needed so we will have only 1 version of get_primary_fields_assign_from_row
	
	if (!is_deleted)
		if (is_added)	
		{	
			vector<TableRow*>::iterator i;	
			for (i = table->addedRows.begin(); (i!=table->addedRows.end()) && ( (Row_@table_name@ *) *i != this); i++);
			
			if (i!=	table->addedRows.end())
				table->addedRows.erase(i);
		
			table->deleted_addedRows.push_back(this);
			is_deleted = true;	
		}
		else
		{
			@table_key@ key(@primary_fields@);
			map<@table_key@, TableRow*, @table_key_comparer@>::iterator i = table->cachedRows.find(key);
			if (i!=table->cachedRows.end())
				table->cachedRows.erase(i);
						
			table->deleted_cachedRows[key] = this;
			is_deleted = true;	
		}	
}

void Row_@table_name@::Reload()
{
	Row_@table_name@ *pRow = this; // Needed so we will have only 1 version of get_primary_fields_assign_from_row

	PLUTO_SAFETY_LOCK_ERRORSONLY(sl,table->database->m_MySqlMutex);
	
	@ifdef_have_primary_keys@
	if (!is_added)
	{
		@table_key@ key(@primary_fields@);
		Row_@table_name@ *pRow = table->FetchRow(key);
		
		if (pRow!=NULL)
		{
			*this = *pRow;	
			
			delete pRow;		
		}	
	}	
	@endif_have_primary_keys@
}

Row_@table_name@::Row_@table_name@(Table_@table_name@ *pTable):table(pTable)
{
	SetDefaultValues();
}

void Row_@table_name@::SetDefaultValues()
{
	@set_default_values@

	is_added=false;
	is_deleted=false;
	is_modified=false;
}

@getters_definition@
		
@setters_definition@
		
@null_getters_definition@
			
@null_setters_definition@	

@fields_sql_getters_definition@


Table_@table_name@::Key::Key(@primary_fields_in_typed_list@)
{
			@primary_fields_assign_list@	
}

Table_@table_name@::Key::Key(Row_@table_name@ *pRow)
{
			PLUTO_SAFETY_LOCK_ERRORSONLY(sl,pRow->table->database->m_MySqlMutex);

			@primary_fields_assign_from_row@	
}		

bool Table_@table_name@::Key_Less::operator()(const Table_@table_name@::Key &key1, const Table_@table_name@::Key &key2) const
{
			@key_less_statement@	
}	

bool Table_@table_name@::Commit(bool bDeleteFailedModifiedRow,bool bDeleteFailedInsertRow)
{
	PLUTO_SAFETY_LOCK_ERRORSONLY(sl,database->m_MySqlMutex);

//insert added
	while (!addedRows.empty())
	{
		vector<TableRow*>::iterator i = addedRows.begin();
	
		Row_@table_name@ *pRow = (Row_@table_name@ *)*i;
	
		@generate_insert_query@
	
		string query = "insert into @table_name@ (@fields_list_comma_separated@) values ("+
			values_list_comma_separated+")";
			
		if (mysql_query(database->m_pMySQL, query.c_str()))
		{	
			database->m_sLastMySqlError = mysql_error(database->m_pMySQL);
			cerr << "Cannot perform query: [" << query << "] " << database->m_sLastMySqlError << endl;
			if( bDeleteFailedInsertRow )
			{
				addedRows.erase(i);
				delete pRow;
			}
			return false;
		}
	
		if (mysql_affected_rows(database->m_pMySQL)!=0)
		{
			@ifdef_have_primary_keys@
			
			/*long int id = (long int)*/ mysql_insert_id(database->m_pMySQL);
		
			@primary_autoinc_key_init@	
			
			addedRows.erase(i);
			@table_key@ key(@primary_fields@);	
			cachedRows[key] = pRow;
			@endif_have_primary_keys@		
			
			pRow->is_added = false;	
			pRow->is_modified = false;	
		}	
				
	}	


//update modified
	@ifdef_have_primary_keys@

	for (map<@table_key@, class TableRow*, @table_key_comparer@>::iterator i = cachedRows.begin(); i!= cachedRows.end(); i++)
		if	(((*i).second)->is_modified_get())
	{
		Row_@table_name@* pRow = (Row_@table_name@*) (*i).second;	
		@table_key@ key(@primary_fields@);

		@build_query_for_key@	
			
		@generate_update_query@
	
		string query = "update @table_name@ set " + update_values_list + " where " + condition;
			
		if (mysql_query(database->m_pMySQL, query.c_str()))
		{	
			database->m_sLastMySqlError = mysql_error(database->m_pMySQL);
			cerr << "Cannot perform query: [" << query << "] " << database->m_sLastMySqlError << endl;
			if( bDeleteFailedModifiedRow )
			{
				cachedRows.erase(i);
				delete pRow;
			}
			return false;
		}
	
		pRow->is_modified = false;	
	}	
	@endif_have_primary_keys@

//delete deleted added
	while (!deleted_addedRows.empty())
	{	
		vector<TableRow*>::iterator i = deleted_addedRows.begin();
		Row_@table_name@* pRow = (Row_@table_name@*) (*i);
		delete pRow;
		deleted_addedRows.erase(i);
	}	


//delete deleted cached
	@ifdef_have_primary_keys@
	while (!deleted_cachedRows.empty())
	{	
		map<@table_key@, class TableRow*, @table_key_comparer@>::iterator i = deleted_cachedRows.begin();
	
		@table_key@ key = (*i).first;
		Row_@table_name@* pRow = (Row_@table_name@*) (*i).second;	

		@build_query_for_key@
	
		string query = "delete from @table_name@ where " + condition;
		
		if (mysql_query(database->m_pMySQL, query.c_str()))
		{	
			database->m_sLastMySqlError = mysql_error(database->m_pMySQL);
			cerr << "Cannot perform query: [" << query << "] " << database->m_sLastMySqlError << endl;
			return false;
		}	
		
		pRow = (Row_@table_name@*) (*i).second;;
		delete pRow;
		deleted_cachedRows.erase(key);
	}
	@endif_have_primary_keys@
	return true;
}

bool Table_@table_name@::GetRows(string where_statement,vector<class Row_@table_name@*> *rows)
{
	PLUTO_SAFETY_LOCK_ERRORSONLY(sl,database->m_MySqlMutex);

	string query;
	if( StringUtils::StartsWith(where_statement,"where ",true) || 
		StringUtils::StartsWith(where_statement,"join ",true) ||
		StringUtils::StartsWith(where_statement,"left ",true) ||
		StringUtils::StartsWith(where_statement,"right ",true) ||
		StringUtils::StartsWith(where_statement,"full ",true) ||
		StringUtils::StartsWith(where_statement,"outer ",true) )
		query = "select `@table_name@`.* from @table_name@ " + where_statement;
	else if( StringUtils::StartsWith(where_statement,"select ",true) )
		query = where_statement;
	else if( where_statement.size() )
		query = "select `@table_name@`.* from @table_name@ where " + where_statement;
	else
		query = "select `@table_name@`.* from @table_name@";
		
	if (mysql_query(database->m_pMySQL, query.c_str()))
	{	
		database->m_sLastMySqlError = mysql_error(database->m_pMySQL);
		cerr << "Cannot perform query: [" << query << "] " << database->m_sLastMySqlError << endl;
		return false;
	}	

	MYSQL_RES *res = mysql_store_result(database->m_pMySQL);
	
	if (!res)
	{
		cerr << "mysql_store_result returned NULL handler" << endl;
		database->m_sLastMySqlError = mysql_error(database->m_pMySQL);
		return false;
	}	
	
	MYSQL_ROW row;
						
		
	while ((row = mysql_fetch_row(res)) != NULL)
	{	
		unsigned long *lengths = mysql_fetch_lengths(res);

		Row_@table_name@ *pRow = new Row_@table_name@(this);
		
		@init_fields_from_row@

		//checking for duplicates

		@table_key@ key(@primary_fields@);
		
		map<@table_key@, class TableRow*, @table_key_comparer@>::iterator i = cachedRows.find(key);
			
		if (i!=cachedRows.end())
		{
			delete pRow;
			pRow = (Row_@table_name@ *)(*i).second;
		}

		rows->push_back(pRow);
		
		cachedRows[key] = pRow;
	}

	mysql_free_result(res);			
		
	return true;					
}

Row_@table_name@* Table_@table_name@::AddRow()
{
	PLUTO_SAFETY_LOCK_ERRORSONLY(sl,database->m_MySqlMutex);

	Row_@table_name@ *pRow = new Row_@table_name@(this);
	pRow->is_added=true;
	addedRows.push_back(pRow);
	return pRow;		
}


@ifdef_have_primary_keys@
Row_@table_name@* Table_@table_name@::GetRow(@primary_fields_in_typed_list@)
{
	PLUTO_SAFETY_LOCK_ERRORSONLY(sl,database->m_MySqlMutex);

	@table_key@ row_key(@primary_fields_in_untyped_list@);

	map<@table_key@, class TableRow*, @table_key_comparer@>::iterator i;
	i = deleted_cachedRows.find(row_key);	
		
	//row was deleted	
	if (i!=deleted_cachedRows.end())
		return NULL;
	
	i = cachedRows.find(row_key);
	
	//row is cached
	if (i!=cachedRows.end())
		return (Row_@table_name@*) (*i).second;
	//we have to fetch row
	Row_@table_name@* pRow = FetchRow(row_key);

	if (pRow!=NULL)
		cachedRows[row_key] = pRow;
	return pRow;	
}
@endif_have_primary_keys@

@ifdef_have_primary_keys@
Row_@table_name@* Table_@table_name@::FetchRow(@table_key@ &key)
{
	PLUTO_SAFETY_LOCK_ERRORSONLY(sl,database->m_MySqlMutex);

	//defines the string query for the value of key
	@build_query_for_key@

	string query = "select * from @table_name@ where " + condition;		

	if (mysql_query(database->m_pMySQL, query.c_str()))
	{	
		database->m_sLastMySqlError = mysql_error(database->m_pMySQL);
		cerr << "Cannot perform query: [" << query << "] " << database->m_sLastMySqlError << endl;
		return NULL;
	}	

	MYSQL_RES *res = mysql_store_result(database->m_pMySQL);
	
	if (!res)
	{
		cerr << "mysql_store_result returned NULL handler" << endl;
		database->m_sLastMySqlError = mysql_error(database->m_pMySQL);
		return NULL;
	}	
	
	MYSQL_ROW row = mysql_fetch_row(res);
	
	if (!row)
	{
		//dataset is empty
		mysql_free_result(res);			
		return NULL;		
	}	
						
	unsigned long *lengths = mysql_fetch_lengths(res);

	Row_@table_name@ *pRow = new Row_@table_name@(this);
		
	@init_fields_from_row@

	mysql_free_result(res);			
	
	return pRow;						
}
@endif_have_primary_keys@

@rows_getters_definition@

@fk_rows_getters_definition@

