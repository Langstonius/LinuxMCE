//
// Author : C Remus
//
// Changed by : ...
//

== wxWidgets integration with Pluto ==

wxWidgets must be compiled with:
--with-gtk=2 --enable-monolithic --with-sdl --with-opengl

For debug builds, add
--enable-debug

sdl: needed by Orbiter
opengl: needed by Orbiter

==Required debian-pluto packages==

Release executables: libwxgtk2.6-0
Debug executables, linked with debug version of the wx library: libwxgtk2.6-dbg



== wxWidgets integration with Orbiter ==

Now, only Linux port of Orbiter uses wxWidgets

A new directory, Orbiter/wxAppMain, was created, which contains only wx-related files
All *.cpp and *.h files added in this directory are automatically used by the Makefile in Orbiter

Read the following wiki link "[[Integrating custom controls in Orbiter]]",
which will explain how to use the wx dialogs, and how to control them.

== Creating a new wxWidgets dialog to be used in Orbiter ==

example: wxSecurityWizard will be the class name

It should be derived from class wxDialog_Base.

    class wxSecurityWizard : public wxDialog_Base
    {
    .......
    }

wxDialog_Base and other classes already implemented will handle the wx-actions and the Orbiter-tasks.

    In "dialog_types.h", E_Dialog_SecurityWizard constant should be added

    In "CallBackData.h", a new class should be created, with the data that will be used by the new dialog

if wxSecurityWizard will be used as a popup:
    class SecurityWizardCallBackData : public PopupCallBackData
    {...}

if wxSecurityWizard will be used as a normal dialog:
    class SecurityWizardCallBackData : public PositionCallBackData
    {...}

-- Generic methods from wxDialog_Base that can/should be overrided --

    // load data from external object, called after create
    // by default calls Gui_Refresh
    virtual bool Gui_DataLoad(CallBackData *pCallBackData);
    
    // save data to external object
    // not called by default
    virtual bool Gui_DataSave(CallBackData *pCallBackData);
    // this should be used when the data from the dialog
    // needs to be transfered to Orbiter
    
    // GUI refresh related code should be implemented here
    // by default set full-screen or update position
    virtual bool Gui_Refresh(CallBackData *pCallBackData);

-- Other methods from wxDialog_Base --

This function should always be called if the position comes from Orbiter,
from a PositionCallBackData derived class.

    void Update_Position_FullScreen(const int x, const int y, const int width, const int height, bool bShowFullScreen);
    // if bShowFullScreen is true, the dialog is created full-screen
    // otherwise, his position is changed
    // if the dialog is already in the desired state, then wx functions for full-screen, or SetSize will not be called

// --EOF--
