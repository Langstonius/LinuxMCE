#!/bin/sh 
set -e

DebconfLoad ()
{
	db_get lirc/remote
	REMOTE="$RET"
	db_get lirc/driver
	LIRCD_DRIVER="$RET"
	db_get lirc/modules
	MODULES="$RET"
	db_get lirc/device
	DEVICE="$RET"
	db_get lirc/lircd_conf
	LIRCD_CONF="$RET"
	db_get lirc/lircmd_conf
	LIRCMD_CONF="$RET"
	
	#Common kernel module configuration
	db_get lirc/port
	LIRC_PORT=$RET
	db_get lirc/irq
	LIRC_IRQ=$RET
	db_get lirc/cflags
	LIRC_CFLAGS=$RET

	#lirc_parallel
	db_get lirc/timer
	LIRC_PARALLEL_TIMER=$RET
}
check_hardware_conf ()
{
	#Make sure that all variables are there, and also create the file if
	#it is not there
	#local VAR
	for VAR in DRIVER MODULES DEVICE LIRCD_CONF LIRCMD_CONF
	do
		# Patch provided by Robert Bihlmeyer <robbe@orcus.priv.at>
		# See http://bugs.debian.org/303078
		if ! grep -q "^[ 	]*$VAR\>" /etc/lirc/hardware.conf; then
			echo "$VAR=\"UNCONFIGURED\"" >> /etc/lirc/hardware.conf
		fi
	done
}

setup_modutils_file ()
{
	MODUTILS="$1"
	if [ ! -f "$MODUTILS" ];then
		#The file was removed, and we should not replace a deleted
		#conffile
		return
	fi

	echo "Setting up modutils file"

	OLD_LINE=""
	NEW_LINE=""
	if expr "$MODULES" : '.*_serial\>' > /dev/null; then
		OLD_LINE="^ *options *lirc_serial"
		NEW_LINE="options lirc_serial io=$LIRC_PORT irq=$LIRC_IRQ"
	elif expr "$MODULES" : '.*_sir\>' > /dev/null; then
		OLD_LINE="^ *options *lirc_sir"
		NEW_LINE="options lirc_sir io=$LIRC_PORT irq=$LIRC_IRQ"
	elif expr "$MODULES" : '.*_parallel\>' > /dev/null; then
		OLD_LINE="^ *options *lirc_parallel"
		NEW_LINE="options lirc_parallel io=$LIRC_PORT irq=$LIRC_IRQ"
	elif expr "$MODULES" : '.*_gpio\>' > /dev/null; then
		:
	elif expr "$MODULES" : '.*_it87\>' > /dev/null; then
		:
	elif expr "$MODULES" : '.*_bt829\>' > /dev/null; then
		:
	elif expr "$MODULES" : '.*_i2c\>' > /dev/null; then
		:
	fi
	ADD_OPTIONS=$(grep "^ *add *options" "$MODUTILS" || true)
	if [ "$OLD_LINE" ]; then
		sed -e "/^ *add *options/D
			/$OLD_LINE/D
			" "$MODUTILS" > "$MODUTILS".tmp
		mv "$MODUTILS".tmp "$MODUTILS"
	fi
	if [ "$NEW_LINE" ]; then
		echo $NEW_LINE >> "$MODUTILS"
	fi
	echo "$ADD_OPTIONS" >> "$MODUTILS"
}

Save ()
{
	check_hardware_conf

	sed -e "
		s|^\(REMOTE\)=.*|\1=\"$REMOTE\"|;
		s|^\(DRIVER\)=.*|\1=\"$LIRCD_DRIVER\"|;
		s|^\(MODULES\)=.*|\1=\"$MODULES\"|;
		s|^\(DEVICE\)=.*|\1=\"$DEVICE\"|;
		s|^\(LIRCD_CONF\)=.*|\1=\"$LIRCD_CONF\"|;
		s|^\(LIRCMD_CONF\)=.*|\1=\"$LIRCMD_CONF\"|;
		" $1 > $1.tmp
#		s|^\(PORT\)=.*|\1=\"$LIRC_PORT\"|;
#		s|^\(IRQ\)=.*|\1=\"$LIRC_IRQ\"|;
#		s|^\(TIMER\)=.*|\1=\"$TIMER\"|;
#		s|^\(CFLAGS\)=.*|\1=\"$CFLAGS\"|;
	mv $1.tmp $1

}

ChooseRemote()
{
	#Find the current remote configuration
	db_get lirc/remote
	OLDREMOTE="$RET"

	#Present the user with some choices
	#To later explain what this is actually doing without man pages:
		#First, only grab lines with a ;
		#Next, sort the list
		#Now, remove all commas from streams
		#Now, Remove all remaining comments or ['s
		#Now, Print the remote name
		#Now, Affix a comma and space to all starts of lines
		#Lastly, change the newline to a null character
	REMOTES=`grep ";" /usr/share/lirc/lirc.hwdb | sort | sed 's/,//g' | awk -F ";" '$0!~/^#|^\[/{print $1}' | sed 's/^/,\ /' | tr '\n' '\0'`
	db_subst lirc/remote REMOTES $REMOTES
	db_input high lirc/remote || true
	db_go

	db_get lirc/remote
	CHOSEN_REMOTE="${RET}"
	MODULES=`grep ";" /usr/share/lirc/lirc.hwdb | sort | sed 's/,//g' |  grep "${CHOSEN_REMOTE}" | awk -F ";" '$0!~/^#|^\[/{print $3}'`
	DRIVER=`grep ";" /usr/share/lirc/lirc.hwdb | sort | sed 's/,//g' |  grep "${CHOSEN_REMOTE}" | awk -F ";" '$0!~/^#|^\[/{print $2}'`
	LIRCD_CONF=`grep ";" /usr/share/lirc/lirc.hwdb | sort | sed 's/,//g' |  grep "${CHOSEN_REMOTE}" | awk -F ";" '$0!~/^#|^\[/{print $5}'`
	SUPPORTED_DRIVERS=`lircd -H help 2>&1 | awk '$0!~/^S|^D/{print $1}' | tr '\n' '\ '`
	if [ "$OLDREMOTE" != "$CHOSEN_REMOTE" ] && [ "$CHOSEN_REMOTE" != "None" ]; then
		db_fset lirc/reconfigure config_changed true
		
		#/dev/input/eventX is a weird case
		if [ "$LIRCD_CONF" != "<A HREF=\"http://linux.bytesex.org/v4l2/faq.html#lircd\">generic config file for Linux input layer</A>" ]; then
			db_set lirc/lircd_conf "$LIRCD_CONF"
		else
			db_set lirc/lircd_conf ""
		fi
		#lirc.hwdb puts none rather than ;;
		if [ "$MODULES" != "none" ]; then
			db_set lirc/modules "$MODULES"
		else
			db_set lirc/modules ""
		fi
		
		#only need to put driver for non kernel module devices
		if echo "$SUPPORTED_DRIVERS" | grep "$DRIVER" > /dev/null; then
			db_set lirc/driver "$DRIVER"
		else
			db_set lirc/driver ""
		fi

		#For atilibusb, we need to blacklist the kernel module
		if [ "$DRIVER" = "atilibusb" ]; then
			db_set lirc/blacklist "lirc_atiusb ati_remote"
		elif [ "$DRIVER" = "atiusb" ]; then
			db_set lirc/blacklist "ati_remote"
		else
			db_set lirc/blacklist ""
		fi
		db_go
	elif [ "$CHOSEN_REMOTE" = "None" ]; then
		db_fset lirc/reconfigure config_changed true
		db_set lirc/driver ""
		db_set lirc/modules ""
		db_set lirc/lircd_conf ""
		db_go
	fi
}

Setup_Blacklist()
{
	db_get lirc/blacklist
	BLACKLIST=$RET
	if [ ! -z "$BLACKLIST" ]; then
		cat > /etc/modprobe.d/lirc <<EOF
#File automatically generated upon lirc install
#Because a module had to be blacklisted. Don't
#Modify by hand, but rather via
#dpkg-reconfigure lirc
EOF
		for item in $BLACKLIST
		do
			cat >> /etc/modprobe.d/lirc <<EOF
blacklist $item
EOF
			if egrep -q '^'"$item"'\ ' /proc/modules; then
				rmmod $item
			fi
		done
	else
		rm -f /etc/modprobe.d/lirc

	fi
}


. /usr/share/debconf/confmodule

if [ "$1" = "configure" ]; then

	[ -x /sbin/udevd ] && invoke-rc.d udev reload >&2

	[ -x /usr/sbin/update-devfsd ] && /usr/sbin/update-devfsd >&2

	#parse the lirc.hwdb to find our remote
	ChooseRemote

	#Prepare the blacklisting for necessary modules
	Setup_Blacklist

	db_fget lirc/reconfigure config_changed
	CONFIG_CHANGED=$RET
	db_fset lirc/reconfigure config_changed false

	if $CONFIG_CHANGED || [ -f /etc/lirc/hardware.conf ];then
		check_hardware_conf
		. /etc/lirc/hardware.conf
	fi

	if $CONFIG_CHANGED || [ "$DRIVER" = "UNCONFIGURED" ]; then
		DebconfLoad
		Save /etc/lirc/hardware.conf
	fi
	db_fget lirc/reconfigure modutils_gen_first_time
	if $CONFIG_CHANGED || ! $RET; then
		DebconfLoad
		setup_modutils_file /etc/modutils/lirc
		db_fset lirc/reconfigure modutils_gen_first_time true
	fi

	# If we don't have a valid lircd.conf try to get one
	if [ ! -f /etc/lirc/lircd.conf ] \
		|| grep -q "^#UNCONFIGURED" /etc/lirc/lircd.conf \
		|| $CONFIG_CHANGED ;then
		db_get lirc/lircd_conf

		# if there is a misplaced config file it is ok to move it to
		# the right place
		if [ -f /etc/lircd.conf ];then 
			echo moving /etc/lircmd.conf to /etc/lirc/
			mv /etc/lircd.conf /etc/lirc/

		# we don't restore the file unless the user is (re)configuring
		elif $CONFIG_CHANGED \
			&& [ -f "/usr/share/lirc/remotes/$RET" ];then
			if [ -f "/etc/lirc/lircd.conf" ]; then
				mv /etc/lirc/lircd.conf /etc/lirc/lircd.conf.dpkg-old
			fi
			cp /usr/share/lirc/remotes/$RET \
				/etc/lirc/lircd.conf
		fi
	fi
	# If we don't have a valid lircmd.conf try to get one
	if [ ! -f /etc/lirc/lircmd.conf ] \
		|| grep -q "^#UNCONFIGURED" /etc/lirc/lircmd.conf ;then
		db_get lirc/lircmd_conf

		# if there is a misplaced config file it is ok to move it to
		# the right place
		if [ -f /etc/lircmd.conf ];then 
			echo moving /etc/lircmd.conf to /etc/lirc/
			mv /etc/lircmd.conf /etc/lirc/

		# we don't restore the file unless the user is (re)configuring
		elif $CONFIG_CHANGED \
			&& [ -f "/usr/share/lirc/remotes/$RET" ];then
			echo trying default lircmd.conf
			cp /usr/share/lirc/remotes/$RET \
				/etc/lirc/lircmd.conf
		fi
	fi
	if [ -f /var/log/lircd ]
	then
		db_get lirc/remove_var-log-lircd
		if $RET 
		then 
			rm /var/log/lircd
		fi
	fi
fi


db_stop

#DEBHELPER#

