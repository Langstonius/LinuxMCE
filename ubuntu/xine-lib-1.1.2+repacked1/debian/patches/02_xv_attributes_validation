#!/bin/sh -e
##
## 02_xv_attributes_validation 
##

. debian/patches/patch-opts

if [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi

case "$1" in
       -patch) patch $patch_opts -p1 < $0;;
       -unpatch) patch $patch_opts -p1 -R < $0;;
        *)
                echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
                exit 1;;
esac

exit 0

@DPATCH@
--- xine-lib-1.1.2-orig/src/video_out/video_out_xv.c	2006-08-29 19:40:06.000000000 +0300
+++ xine-lib-1.1.2/src/video_out/video_out_xv.c	2006-08-30 00:01:42.000000000 +0300
@@ -1013,19 +1013,49 @@
   return 0;
 }
 
-static void xv_store_port_attribute(xv_driver_t *this, char *name) {
+static void xv_store_port_attribute(xv_driver_t *this, XvAttribute *xvattr) {
   Atom                 atom;
   xv_portattribute_t  *attr;
+  int                  result;
+  
+  if ( !( (xvattr->flags & XvGettable)&&(xvattr->flags & XvSettable) ) )
+  {
+      xprintf(this->xine, XINE_VERBOSITY_DEBUG,
+	      "video_out_xv: not storing initial value for port attribute %s, because of inappropriate flags: %s%s\n", 
+	      xvattr->name, (xvattr->flags & XvGettable)?"XvGettable":"", (xvattr->flags & XvSettable)?"XvSettable":"");
+      return;
+  }
   
   attr = (xv_portattribute_t *)malloc( sizeof(xv_portattribute_t) );
-  attr->name = strdup(name);
+  attr->name = strdup(xvattr->name);
   
   XLockDisplay(this->display);
   atom = XInternAtom (this->display, attr->name, False);
-  XvGetPortAttribute (this->display, this->xv_port, atom, &attr->value);
+  result = XvGetPortAttribute (this->display, this->xv_port, atom, &attr->value);
   XUnlockDisplay(this->display);
   
-  xine_list_push_back (this->port_attributes, attr);
+  /* attribute value was obtained correctly */
+  if (result==Success)
+  {
+    /* current attribute value is in allowed range */
+    if ((attr->value>=xvattr->min_value)&&(attr->value<=xvattr->max_value))
+    {
+      xprintf(this->xine, XINE_VERBOSITY_DEBUG,
+	      "video_out_xv: storing initial value %d for port attribute %s\n", attr->value, attr->name);
+      xine_list_push_back (this->port_attributes, attr);
+      return;
+    }
+    else
+      xprintf(this->xine, XINE_VERBOSITY_DEBUG,
+	      "video_out_xv: do not storing initial value %d for port attribute %s because it is out of allowed range [%d, %d] (buggy driver?)\n", attr->value, 
+	      attr->name, xvattr->min_value, xvattr->max_value);
+  }
+  else
+      xprintf(this->xine, XINE_VERBOSITY_DEBUG,
+	      "video_out_xv: failed to obtain initial value for port attribute %s\n", attr->name);
+
+	free(attr->name);
+	free(attr);
 }
 
 static void xv_restore_port_attributes(xv_driver_t *this) {
@@ -1387,7 +1417,7 @@
     for(k = 0; k < nattr; k++) {
       if((attr[k].flags & XvSettable) && (attr[k].flags & XvGettable)) {
 	/* store initial port attribute value */
-	xv_store_port_attribute(this, attr[k].name);
+	xv_store_port_attribute(this, attr+k);
 	
 	if(!strcmp(attr[k].name, "XV_HUE")) {
 	  if (!strncmp(adaptor_info[adaptor_num].name, "NV", 2)) {
