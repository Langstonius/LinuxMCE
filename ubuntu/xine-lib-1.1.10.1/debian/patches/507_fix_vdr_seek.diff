diff -r 2059f1a741f8 src/demuxers/demux_mpeg_pes.c
--- a/src/demuxers/demux_mpeg_pes.c	Tue Mar 25 09:44:19 2008 +0200
+++ b/src/demuxers/demux_mpeg_pes.c	Tue Mar 25 18:57:49 2008 +0200
@@ -40,6 +40,9 @@
 /*
 #define LOG
 */
+
+#define ESTIMATE_RATE_FIXED
+#define USE_ILL_ADVISED_ESTIMATE_RATE_INITIALLY
 
 #include "xine_internal.h"
 #include "xineutils.h"
@@ -1291,8 +1294,8 @@ static int demux_mpeg_pes_send_chunk (de
 /* How many *sucessful* PTS samples do we take? */
 #define MAX_SAMPLES 5
 
-/* How many times we read blocks before giving up. */
-#define MAX_READS 30
+/* How many times we read blocks before giving up in the current probe */
+#define MAX_READS 100
 
 /* TRUNCATE x to the nearest multiple of y. */
 #define TRUNC(x,y) (((x) / (y)) * (y))
@@ -1301,11 +1304,12 @@ static int demux_mpeg_pes_estimate_rate 
 
   buf_element_t *buf = NULL;
   unsigned char *p;
+  int            i;
   int            is_mpeg1=0;
-  off_t          pos, last_pos=0;
+  off_t          pos, max_pos, last_pos=0;
   off_t          step, mpeg_length;
   int64_t        pts, last_pts=0;
-  int            reads=0    /* Number of blocks read so far */;
+  int            reads=0    /* Number of blocks read so far in the current probe */;
   int            count=0;   /* Number of sucessful PTS found so far */
   int            rate=0;    /* The return rate value */
   int            stream_id;
@@ -1316,124 +1320,133 @@ static int demux_mpeg_pes_estimate_rate 
     return 0;
 
   mpeg_length= this->input->get_length (this->input);
-  step = TRUNC((mpeg_length/MAX_SAMPLES), 2048); 
-  if (step <= 0) step = 2048; /* avoid endless loop for tiny files */
-  pos = step;
-
-  /* At this point "pos", and "step" are a multiple of blocksize and
-     they should continue to be so throughout.
-   */
-  
-  this->input->seek (this->input, pos, SEEK_SET);
-
-  while ( (buf = this->input->read_block (this->input, this->video_fifo, 2048)) 
-	  && count < MAX_SAMPLES && reads++ < MAX_READS ) {
-
-    p = buf->content; /* len = this->mnBlocksize; */
-
-    if (p[3] == 0xBA) { /* program stream pack header */
-
-      is_mpeg1 = (p[4] & 0x40) == 0;
-
-      if (is_mpeg1) 
-	p   += 12;
-      else 
-	p += 14 + (p[0xD] & 0x07);
-    }
-
-    if (p[3] == 0xbb)  /* program stream system header */
-      p  += 6 + ((p[4] << 8) | p[5]);
-
-    /* we should now have a PES packet here */
-
-    if (p[0] || p[1] || (p[2] != 1)) {
-      xprintf (this->stream->xine, XINE_VERBOSITY_DEBUG, 
-	       "demux_mpeg_pes: error %02x %02x %02x (should be 0x000001) \n", p[0], p[1], p[2]);
+  step = mpeg_length / MAX_SAMPLES;
+
+  for (i=0; i<MAX_SAMPLES; i++) {
+    xprintf(this->stream->xine, XINE_VERBOSITY_DEBUG, "demux_mpeg_pes_estimate_rate: probe %i, searching for VPTS\n", i+1);
+    pos = i*step;
+    max_pos = (i+1)*step;
+
+    this->input->seek (this->input, pos, SEEK_SET);
+    
+    const int block_size=2048;
+    reads = 0;
+
+    while ( (buf = this->input->read_block (this->input, this->video_fifo, block_size)) ) {
+      reads++;
+      p = buf->content;
+
+      // search for the start of the PES packet
+      int current_probe_finished = 0;
+      int i=0;
+
+      for (i=0; i<block_size/2; i++)
+      {
+        // found the 0x00 0x00 0x01 sequence
+        if ( p[i]==0 && p[i+1]==0 && p[i+2]==1 )
+        {
+          int j=i;
+
+          if (p[j+3] == 0xBA) { /* program stream pack header */
+
+            is_mpeg1 = (p[j+4] & 0x40) == 0;
+
+            if (is_mpeg1) 
+              j += 12;
+            else 
+              j += 14 + (p[j+0xD] & 0x07);
+          }
+
+          if (p[j+3] == 0xbb)  /* program stream system header */
+            j  += 6 + ((p[j+4] << 8) | p[j+5]);
+
+          /* we should now have a PES packet here */
+          if (p[j]==0 && p[j+1]==0 && p[j+2]==1) {
+            stream_id  = p[j+3];
+            pts = 0; 
+          }
+
+          if ((stream_id < 0xbc) || ((stream_id & 0xf0) != 0xe0)) {
+            continue; /* only use video packets */
+          }
+
+          if (is_mpeg1) {
+
+            if (p[j+3] != 0xBF) { /* stream_id */
+
+              j += 6; /* packet_len -= 6; */
+
+              while ((p[j] & 0x80) == 0x80) {
+                j++; /* stuffing */
+              }
+
+              if ((p[j] & 0xc0) == 0x40) {
+                /* STD_buffer_scale, STD_buffer_size */
+                j += 2;
+              }
+
+              if ( ((p[j] & 0xf0) == 0x20) || ((p[j] & 0xf0) == 0x30) ) {
+                pts  = (int64_t)(p[j] & 0x0E) << 29 ;
+                pts |=  p[j+1]         << 22 ;
+                pts |= (p[j+2] & 0xFE) << 14 ;
+                pts |=  p[j+3]         <<  7 ;
+                pts |= (p[j+4] & 0xFE) >>  1 ;
+              } 
+            }
+          } else { /* mpeg 2 */
+      
+            if (p[j+7] & 0x80) { /* pts avail */
+	
+              pts  = (int64_t)(p[j+9] & 0x0E) << 29 ;
+              pts |=  p[j+10]         << 22 ;
+              pts |= (p[j+11] & 0xFE) << 14 ;
+              pts |=  p[j+12]         <<  7 ;
+              pts |= (p[j+13] & 0xFE) >>  1 ;
+	
+            } else
+              pts = 0;
+          }
+        
+          if (pts) {
+            if ( (pos>last_pos) && (pts>last_pts) ) {
+              int cur_rate;
+              cur_rate = ((pos+j - last_pos)*90000) / ((pts - last_pts) * 50);
+              rate = (count * rate + cur_rate) / (count+1);
+              count ++;
+            }
+
+            last_pos = pos+j;
+            last_pts = pts;
+
+            // stopping search for the MPEG packet for this probe
+            xprintf(this->stream->xine, XINE_VERBOSITY_DEBUG, "demux_mpeg_pes_estimate_rate: found VPTS info, pos %i, pts %Li\n",
+                    (int)pos+j, pts);
+            current_probe_finished = 1;
+            break;
+          }
+
+        }
+      }
+
+      pos += block_size / 2;
+
       buf->free_buffer (buf);
-      return rate;
-    }
-
-    stream_id  = p[3];
-    pts = 0; 
-
-    if ((stream_id < 0xbc) || ((stream_id & 0xf0) != 0xe0)) {
-      pos += (off_t) 2048;
+      buf = NULL;
+
+      // exiting if we reached the end of current sample or too many reads
+      if ((reads >= MAX_READS) || current_probe_finished || (pos+block_size) >= max_pos || this->input->seek (this->input, pos, SEEK_SET) == (off_t)-1) {
+        break;
+      }
+    }
+
+    // cleanup
+    if (buf)
       buf->free_buffer (buf);
-      continue; /* only use video packets */
-    }
-
-    if (is_mpeg1) {
-
-      if (p[3] != 0xBF) { /* stream_id */
-
-	p += 6; /* packet_len -= 6; */
-
-	while ((p[0] & 0x80) == 0x80) {
-	  p++; /* stuffing */
-	}
-
-	if ((p[0] & 0xc0) == 0x40) {
-	  /* STD_buffer_scale, STD_buffer_size */
-	  p += 2;
-	}
-
-	if ( ((p[0] & 0xf0) == 0x20) || ((p[0] & 0xf0) == 0x30) ) {
-	  pts  = (int64_t)(p[ 0] & 0x0E) << 29 ;
-	  pts |=  p[ 1]         << 22 ;
-	  pts |= (p[ 2] & 0xFE) << 14 ;
-	  pts |=  p[ 3]         <<  7 ;
-	  pts |= (p[ 4] & 0xFE) >>  1 ;
-	} 
-      }
-    } else { /* mpeg 2 */
-      
-      if (p[7] & 0x80) { /* pts avail */
-	
-	pts  = (int64_t)(p[ 9] & 0x0E) << 29 ;
-	pts |=  p[10]         << 22 ;
-	pts |= (p[11] & 0xFE) << 14 ;
-	pts |=  p[12]         <<  7 ;
-	pts |= (p[13] & 0xFE) >>  1 ;
-	
-      } else
-	pts = 0;
-    }
-
-    if (pts) {
-
-
-      if ( (pos>last_pos) && (pts>last_pts) ) {
-	int cur_rate;
-      
-	cur_rate = ((pos - last_pos)*90000) / ((pts - last_pts) * 50);
-	
-	rate = (count * rate + cur_rate) / (count+1);
-
-	count ++;
-	
-	/*
-	printf ("demux_mpeg_pes: stream_id %02x, pos: %"PRId64", pts: %d, cur_rate = %d, overall rate : %d\n", 
-		stream_id, pos, pts, cur_rate, rate); 
-	*/
-      }
-
-      last_pos = pos;
-      last_pts = pts;
-      pos += step;
-    } else
-      pos += 2048;
-
-    buf->free_buffer (buf);
-
-    if (pos > mpeg_length || this->input->seek (this->input, pos, SEEK_SET) == (off_t)-1)
-      break;
-
-  }
-}
-
-  lprintf("est_rate=%d\n",rate);
+  }
+
+  xprintf(this->stream->xine, XINE_VERBOSITY_DEBUG, "demux_mpeg_pes_estimate_rate: estimated rate=%d\n",rate);
   return rate;
-  
+
 }
 #endif /*ESTIMATE_RATE_FIXED*/
 
@@ -1466,7 +1479,16 @@ static void demux_mpeg_pes_send_headers 
   
 #ifdef USE_ILL_ADVISED_ESTIMATE_RATE_INITIALLY
   if (!this->rate) 
-    this->rate = demux_mpeg_pes_estimate_rate (this);
+  {
+    const char *const mrl = this->input->get_mrl (this->input);
+    const char *const ending = strrchr(mrl, '.');
+
+    // estimating speed only for VDR records
+    if ( ending && (strncasecmp(ending,".vdr",4)==0) ) 
+      this->rate = demux_mpeg_pes_estimate_rate (this);
+    else
+      this->rate = 0;
+  }
 #else 
   /* Set to Use rate given in by stream initially. */
   this->rate = 0; 
