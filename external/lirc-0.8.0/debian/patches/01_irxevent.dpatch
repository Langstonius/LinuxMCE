#! /bin/sh /usr/share/dpatch/dpatch-run
## 01_irxevent.dpatch by Amaya Rodrigo Sastre <amaya@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad trunk~/tools/irxevent.c trunk/tools/irxevent.c
--- trunk~/tools/irxevent.c	2006-01-15 21:34:37.000000000 +0100
+++ trunk/tools/irxevent.c	2006-02-12 00:00:52.000000000 +0100
@@ -92,16 +92,21 @@
 
 #include "lirc_client.h"
 
+static int bVerbose = 0;
+static int bInError = 0;
+
 #ifdef DEBUG
-void debugprintf(char *format_str, ...)
+
+static void debugprintf(char *format_str, ...)
 {
         va_list ap;
         va_start(ap,format_str);
-        vfprintf(stderr,format_str,ap);
+        if(bVerbose)
+		vfprintf(stderr,format_str,ap);
         va_end(ap);
 }
 #else
-void debugprintf(char *format_str, ...)
+static void debugprintf(char *format_str, ...)
 {
 }
 #endif
@@ -123,18 +128,18 @@
   {NULL,0},
 };
 
-const char *key_delimiter ="-";
-const char *active_window_name ="CurrentWindow";
-const char *root_window_name ="RootWindow";
+static const char *key_delimiter ="-";
+static const char *active_window_name ="CurrentWindow";
+static const char *root_window_name ="RootWindow";
 
 
-char *progname;
-Display *dpy;
-Window root;
-XEvent xev;
-Window w,subw;
+static char *progname;
+static Display *dpy;
+static Window root;
+static XEvent xev;
+static Window subw;
 
-Time fake_timestamp()
+static Time fake_timestamp()
      /*seems that xfree86 computes the timestamps like this     */
      /*strange but it relies on the *1000-32bit-wrap-around     */
      /*if anybody knows exactly how to do it, please contact me */
@@ -149,7 +154,7 @@
   return (Time)tint;
 }
 
-Window find_window(Window top,char *name)
+static Window find_window(Window top,char *name)
 {
   char *wname,*iname;
   XClassHint xch;
@@ -208,7 +213,7 @@
   return(top);
 }
 
-Window find_sub_sub_window(Window top,int *x, int *y)
+static Window find_sub_sub_window(Window top,int *x, int *y)
 {
   Window base;
   Window *children,foo,target=0;
@@ -252,7 +257,7 @@
 
 
 
-Window find_sub_window(Window top,char *name,int *x, int *y)
+static Window find_sub_window(Window top,char *name,int *x, int *y)
 {
   Window base;
   Window *children,foo,target=0;
@@ -295,7 +300,7 @@
 }
 
 
-Window find_window_focused(Window top,char *name) 
+static Window find_window_focused(Window top,char *name) 
 {
   int tmp;
   Window w, cur, *children, foo;
@@ -328,7 +333,7 @@
   return(0);
 }
 
-void make_button(int button,int x,int y,XButtonEvent *xev)
+static void make_button(int button,int x,int y,XButtonEvent *xev)
 {
   xev->type = ButtonPress;
   xev->display=dpy;
@@ -344,7 +349,7 @@
   return;
 }
 
-void make_key(char *keyname,int x, int y,XKeyEvent *xev)
+static void make_key(char *keyname,int x, int y,XKeyEvent *xev)
 {
   char *part, *part2, *sep_part;
   struct keymodlist_t *kmlptr;
@@ -414,7 +419,7 @@
   return ;
 }
 
-void sendfocus(Window w,int in_out)
+static void sendfocus(Window w,int in_out)
 {
   XFocusChangeEvent focev;
 
@@ -429,7 +434,7 @@
   return;
 }
 
-void sendpointer_enter_or_leave(Window w,int in_out)
+static void sendpointer_enter_or_leave(Window w,int in_out)
 {
   XCrossingEvent crossev;
   crossev.type=in_out;
@@ -452,7 +457,7 @@
   return;
 }
 
-void sendkey(char *keyname,int x,int y,Window w,Window s)
+static void sendkey(char *keyname,int x,int y,Window w,Window s)
 {
   make_key(keyname ,x,y,(XKeyEvent*)&xev);
   xev.xkey.window=w;
@@ -470,7 +475,7 @@
   return;
 }
 
-void sendbutton(int button, int x, int y, Window w,Window s)
+static void sendbutton(int button, int x, int y, Window w,Window s)
 {
   make_button(button,x,y,(XButtonEvent*)&xev);
   xev.xbutton.window=w;
@@ -492,6 +497,17 @@
   return;
 }
 
+int errorHandler(Display* di, XErrorEvent* ev)
+{
+  if(bInError || ev==NULL || di==NULL) return 1;      // only 1 msg per key
+  char buff[512]; buff[0] = 0;
+  XGetErrorText(di, ev->error_code, buff, sizeof(buff)-1);
+  if(buff[0]) {
+     fprintf(stderr, "X11 error: %s\n", buff);
+     bInError = 1;
+  }
+  return 1;
+}
 
 int check(char *s)
 {
@@ -528,7 +544,9 @@
 
 static struct option long_options[] =
 {
-	{"help", no_argument, NULL, 'h'},
+	{"daemon",  no_argument, NULL, 'd'},
+	{"help",    no_argument, NULL, 'h'},
+	{"verbose", no_argument, NULL, 'v'},
 	{"version", no_argument, NULL, 'V'},
 	{0, 0, 0, 0}
 };
@@ -542,18 +560,27 @@
   char *config_file=NULL;
   int c;
   int WindowID;
+  int bDaemon = 0;
 
   progname=argv[0];
 
-  while ((c = getopt_long(argc, argv, "hV", long_options, NULL)) != EOF) {
+  while ((c = getopt_long(argc, argv, "dhvV", long_options, NULL)) != EOF) {
     switch (c) {
+    case 'd':
+      bDaemon = 1; continue;
     case 'h':
-      printf("Usage: %s [config file]\n", argv[0]);
-      printf("\t -h --help \t\tdisplay usage summary\n");
-      printf("\t -V --version \t\tdisplay version\n");
+      printf("Usage: %s [option]... [config file]\n"
+             "       -d --daemon     fork and run in background\n"
+             "       -h --help       display usage summary\n"
+             "       -v --verbose    report what happens\n"
+             "       -V --version    display version\n", progname);
       return(EXIT_SUCCESS);
+    case 'v':
+      bVerbose = 1;
+      // fall through...
     case 'V':
-      printf("%s %s\n", progname, VERSION);
+      printf("%s %s (zapdvb 2005_09_15)\n", progname, VERSION);
+      if(bVerbose) break;
       return(EXIT_SUCCESS);
     case '?':
       fprintf(stderr, "unrecognized option: -%c\n", optopt);
@@ -577,20 +604,32 @@
   }
   root=RootWindow(dpy,DefaultScreen(dpy));
 
+  // windows may get closed at wrong time. Override default error handler...
+  XSetErrorHandler(errorHandler);
+  
   if(lirc_init("irxevent",1)==-1) exit(EXIT_FAILURE);
 
   if(lirc_readconfig(config_file,&config,check)==0)
     {
+
+     if(bDaemon) {
+	if(daemon(1, 0) < 0) {
+	   perror("Failed to run as daemon");
+	   exit(2);
+        }
+     }
+     
       char *ir;
       char *c;
       int ret;
-      
+ 
       while(lirc_nextcode(&ir)==0)
 	{
 	  if(ir==NULL) continue;
 	  while((ret=lirc_code2char(config,ir,&c))==0 && c!=NULL)
 	    {
-	      debugprintf("Recieved code: %s Sending event: \n",ir);
+	      debugprintf("Received code: %s Sending event: \n",ir);
+	      bInError = 0;   // reset error state, want to see error msg
 	      
 	      *windowname=0;
 	      if(2==sscanf(c,"Key %s Focus WindowID %i",keyname,&WindowID) ||
