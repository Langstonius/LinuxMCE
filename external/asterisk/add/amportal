#!/bin/bash

ROOT_UID=0     # root uid is 0
E_NOTROOT=67     # Non-root exit error

echo
# check to see if we are root
if [ "$UID" -ne "$ROOT_UID" ]
then
    echo "Sorry, you must be root to run this script."
    echo
    exit $E_NOTROOT
fi

# make sure config file exists
if [ ! -e "/etc/amportal.conf" ]       # Check if file exists.
then
    echo;
    echo "/etc/amportal.conf does not exist!";
    echo "Have you installed the AMP configuration?";
    exit;
fi
source /etc/amportal.conf

chown_asterisk() {
    echo SETTING FILE PERMISSIONS
    chown -R asterisk:www-data /var/run/asterisk
    chown -R asterisk:www-data /etc/asterisk
    chown -R asterisk:www-data /var/lib/asterisk
    chown -R asterisk:www-data /var/log/asterisk
    chown -R asterisk:www-data /var/spool/asterisk
    chown -Rf asterisk:www-data /dev/zap
    chown asterisk /dev/tty9
    chown -R asterisk:www-data $AMPWEBROOT/admin
    chown -R asterisk:www-data $AMPWEBROOT/panel
    chown -R asterisk:www-data $AMPWEBROOT/recordings
    chown -R asterisk:www-data $AMPWEBROOT/_asterisk
    chown -R asterisk:www-data $AMPCGIBIN/vmail.cgi
    chmod ug+x /var/lib/asterisk/bin/*.pl
    chmod ug+x /var/lib/asterisk/bin/archive_recordings
    chmod ug+x /var/lib/asterisk/agi-bin/*
    chmod ug+x $AMPCGIBIN/vmail.cgi
    chmod ug+x $AMPWEBROOT/admin/*.pl
    chmod ug+x $AMPWEBROOT/admin/*.sh
    chmod ug+x $AMPWEBROOT/panel/*.pl
    chmod ug+x $AMPWEBROOT/panel/safe_opserver
    chmod -R ug+rx /var/lib/asterisk/sounds/voicemail
}

check_asterisk() {
# check to see if asterisk is running
# Note, this isn't fool-proof.  If safe_asterisk is constantly restarting a dying asterisk, then there is a chance pidof will return non zero.  We call this twice to reduce chances of this happening
    pid=$(pidof asterisk)

    killall asterisk_keep_running.pl

    if [[ -z "$pid" ]]
    then
        killall -9 safe_asterisk
        killall -9 mpg123 > /dev/null
        echo
        echo "-----------------------------------------------------"
        echo "Asterisk could not start!"
        echo "Use 'tail /var/log/asterisk/full' to find out why."
        echo "-----------------------------------------------------"
        exit 0
    fi
}

run_asterisk() {
# check to see if asterisk is running
    pid=$(pidof asterisk)
    if [[ -n "$pid" ]]
    then
        echo "Asterisk is already running"
    else
        echo -n "Asterisk is starting "
        screen -d -m -S safe_asterisk /usr/sbin/safe_asterisk -U asterisk -G asterisk
        if [ -z "`ps auxww | grep asterisk_keep_running.pl | grep -v grep`" ]
        then
            touch /var/log/asterisk/full
            screen -d -m -S asterisk_keep_running /bin/sh -c 'tail -f /var/log/asterisk/full | /usr/pluto/bin/asterisk_keep_running.pl'
        fi
        # Wait up to 5 seconds for asterisk to start
        local counter=0
        while [[ -z "$(pidof asterisk)" ]]; do
            echo -n "."
            sleep 0.1
            counter=$(($counter + 1))
            if [ $counter -gt 50 ] ;then
                echo " failed"
                killall -9 safe_asterisk
                killall -9 mpg123 > /dev/null
                exit 0
            fi
        done

        # Check for 0.1 x counter seconds that asterisk stays started
        local counter=50
        while [ $counter -gt 0 ]; do
            echo -n "."
            sleep 0.1
            counter=$(($counter - 1))

            if [[ -z "$(pidof asterisk)" ]] ;then
                echo " failed"
                killall -9 safe_asterisk
                killall -9 mpg123 > /dev/null
                exit 0
            fi    
        done
        echo " done"
    fi
}

stop_asterisk() {
    echo
    echo "STOPPING ASTERISK"
    pid=$(pidof asterisk)
    if [[ -n "$pid" ]]
    then
        /usr/sbin/asterisk -rx "stop gracefully"
        /usr/sbin/asterisk -rx "stop now"
        echo "Asterisk Stopped"
    fi
}

check_fop() {
#check to see if FOP is running
    pid=$(pidof -x op_server.pl)
    if [[ -z "$pid" ]]
    then
        killall -9 safe_opserver
        echo
        echo "-----------------------------------------------------"
        echo "The FOP's server (op_server.pl) could not start!"
        echo "Please correct this problem"
        echo "-----------------------------------------------------"
        exit 0
    fi
}

run_fop() {
# check to see if FOP is running
    echo
    echo "STARTING FOP SERVER"
    pid=$(pidof -x op_server.pl)
    if [[ -n "$pid" ]]
    then
        echo "FOP server is already running"
    else
        su - asterisk -c "cd $AMPWEBROOT/panel && $AMPWEBROOT/panel/safe_opserver &"
        sleep 1
        check_fop
        echo "FOP Server Started"
    fi
}

stop_fop() {
    echo
    echo "STOPPING FOP SERVER"
    pid=$(pidof -x op_server.pl)
    if [[ -n "$pid" ]]
    then
        killall -9 safe_opserver
        killall -9 op_server.pl
        echo "FOP Server Stopped"
    fi
}

kill_amp() {
    echo
    echo "KILLING AMP PROCESSES"
    killall -9 safe_asterisk
    killall -9 asterisk
    killall -9 mpg123
    killall -9 safe_opserver
    killall -9 op_server.pl
}

case "$1" in
    start)
        chown_asterisk
        run_asterisk
    ;;
    stop)
        stop_asterisk
    ;;
    restart)
        stop_asterisk
        sleep 1
        chown_asterisk
        run_asterisk
    ;;
    chown)
        chown_asterisk
    ;;
    kill)
        kill_amp
    ;;
    *)
        echo "----------AMP Control Script-----------"
        echo "Usage: amportal start|stop|kill|chown"
        echo
        echo "start: Starts Asterisk and Flash Operator Panel server"
        echo "stop: Gracefully stops Asterisk and the FOP server"
        echo "restart: Stop and Starts"
        echo "kill: Kills Asterisk and the FOP server"
        echo "chown: Sets appropriate permissions on files"
        echo
        exit 1
    ;;
esac
    
